<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd">
  <!-- Configure the database connection here -->
  <jdbc>
      <driver>org.h2.Driver</driver>
      <url>jdbc:h2:tcp://localhost:9092/mem:test</url>
      <user>sa</user>
      <password></password>
  </jdbc>

  <generator>
    <!-- The default code generator. You can override this one, to generate your own code style.
         Supported generators:
         - org.jooq.util.JavaGenerator
         - org.jooq.util.ScalaGenerator
         Defaults to org.jooq.util.JavaGenerator -->
    <name>org.jooq.util.JavaGenerator</name>

    <database>
      <!-- The database type from jooq-meta. The format here is:
           org.util.[database].[database]Database. The freeware version has no Oracle support (?) -->
      <name>org.jooq.util.h2.H2Database</name>

      <!-- The database schema (or in the absence of schema support, in your RDBMS this
           can be the owner, user, database name) to be generated -->
      <inputSchema>PUBLIC</inputSchema>

      <!-- All elements that are generated from your schema
           (A Java regular expression. Use the pipe to separate several expressions)
           Watch out for case-sensitivity. Depending on your database, this might be important! -->
      <includes>.*</includes>

      <!-- All elements that are excluded from your schema
           (A Java regular expression. Use the pipe to separate several expressions).
           Excludes match before includes -->
      <excludes></excludes>
    </database>

    <target>
      <!-- The destination package of your generated classes (within the destination directory) -->
      <packageName>java8.concurrent.dbaccess.backend.generated</packageName>

      <!-- The destination directory of your generated classes -->
      <directory>src/main/java</directory>
    </target>
  </generator>
</configuration>