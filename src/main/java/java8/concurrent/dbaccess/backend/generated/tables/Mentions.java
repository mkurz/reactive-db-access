/**
 * This class is generated by jOOQ
 */
package java8.concurrent.dbaccess.backend.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import java8.concurrent.dbaccess.backend.generated.Keys;
import java8.concurrent.dbaccess.backend.generated.Public;
import java8.concurrent.dbaccess.backend.generated.tables.records.MentionsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mentions extends TableImpl<MentionsRecord> {

	private static final long serialVersionUID = -537067014;

	/**
	 * The reference instance of <code>PUBLIC.MENTIONS</code>
	 */
	public static final Mentions MENTIONS = new Mentions();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MentionsRecord> getRecordType() {
		return MentionsRecord.class;
	}

	/**
	 * The column <code>PUBLIC.MENTIONS.TWEET_ID</code>.
	 */
	public final TableField<MentionsRecord, Long> TWEET_ID = createField("TWEET_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MENTIONS.CREATED_ON</code>.
	 */
	public final TableField<MentionsRecord, Timestamp> CREATED_ON = createField("CREATED_ON", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MENTIONS.TEXT</code>.
	 */
	public final TableField<MentionsRecord, String> TEXT = createField("TEXT", org.jooq.impl.SQLDataType.VARCHAR.length(160).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.MENTIONS.USER_NAME</code>.
	 */
	public final TableField<MentionsRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.MENTIONS</code> table reference
	 */
	public Mentions() {
		this("MENTIONS", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.MENTIONS</code> table reference
	 */
	public Mentions(String alias) {
		this(alias, MENTIONS);
	}

	private Mentions(String alias, Table<MentionsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Mentions(String alias, Table<MentionsRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MentionsRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_A;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MentionsRecord>> getKeys() {
		return Arrays.<UniqueKey<MentionsRecord>>asList(Keys.CONSTRAINT_A);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Mentions as(String alias) {
		return new Mentions(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Mentions rename(String name) {
		return new Mentions(name, null);
	}
}
