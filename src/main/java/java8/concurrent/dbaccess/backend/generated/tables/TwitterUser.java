/**
 * This class is generated by jOOQ
 */
package java8.concurrent.dbaccess.backend.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import java8.concurrent.dbaccess.backend.generated.Keys;
import java8.concurrent.dbaccess.backend.generated.Public;
import java8.concurrent.dbaccess.backend.generated.tables.records.TwitterUserRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TwitterUser extends TableImpl<TwitterUserRecord> {

	private static final long serialVersionUID = -308162768;

	/**
	 * The reference instance of <code>PUBLIC.TWITTER_USER</code>
	 */
	public static final TwitterUser TWITTER_USER = new TwitterUser();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TwitterUserRecord> getRecordType() {
		return TwitterUserRecord.class;
	}

	/**
	 * The column <code>PUBLIC.TWITTER_USER.USER_ID</code>.
	 */
	public final TableField<TwitterUserRecord, Long> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TWITTER_USER.USER_NAME</code>.
	 */
	public final TableField<TwitterUserRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TWITTER_USER.CREATED_ON</code>.
	 */
	public final TableField<TwitterUserRecord, Timestamp> CREATED_ON = createField("CREATED_ON", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.TWITTER_USER</code> table reference
	 */
	public TwitterUser() {
		this("TWITTER_USER", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.TWITTER_USER</code> table reference
	 */
	public TwitterUser(String alias) {
		this(alias, TWITTER_USER);
	}

	private TwitterUser(String alias, Table<TwitterUserRecord> aliased) {
		this(alias, aliased, null);
	}

	private TwitterUser(String alias, Table<TwitterUserRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TwitterUserRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_5;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TwitterUserRecord>> getKeys() {
		return Arrays.<UniqueKey<TwitterUserRecord>>asList(Keys.CONSTRAINT_5);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TwitterUser as(String alias) {
		return new TwitterUser(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TwitterUser rename(String name) {
		return new TwitterUser(name, null);
	}
}
